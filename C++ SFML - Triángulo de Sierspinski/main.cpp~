#include <SFML/Graphics.hpp>
#include <math.h>
#include <string>
#include <iostream>

#define SZ 800

float map(float val, float a, float b, float a1, float b1) {
    return a + (val - a) * (b1 - a1) / (b - a);
}

void draw_triang(sf::Vector2f p1, sf::Vector2f p2, sf::Vector2f p3, sf::Color col, sf::RenderWindow* win) {
    sf::VertexArray triangle(sf::Triangles, 3);

    triangle[0].position = p1;
    triangle[1].position = p2;
    triangle[2].position = p3;

    triangle[0].color = col;
    triangle[1].color = col;
    triangle[2].color = col;
  
    win->draw(triangle);
}

void draw_sierspinki(int it, sf::Vector2f _p1, sf::Vector2f _p2, sf::Vector2f _p3, sf::RenderWindow* win) {
    if (it == 0) return;
  
    float y_i = (_p1 + _p2).y / 2;

    sf::Vector2f p1((_p1 + _p2).x / 2, y_i);
    sf::Vector2f p2((_p1 + _p3).x / 2, y_i);
    sf::Vector2f p3(_p1.x, _p2.y);

    draw_triang(p1, p2, p3, sf::Color::Black, win);
  
    // arriba
    draw_sierspinki(it - 1, _p1, p1, p2, win);

    // izquierda
    draw_sierspinki(it - 1, p1, _p2, p3, win);

    // derecha
    draw_sierspinki(it - 1, p2, p3, _p3, win);
}

void dibuixar(int it, float lado, sf::RenderWindow* win) {
    // calculamos vértices iniciales
    float x = SZ / 2;
    float h = lado * std::sqrt(3) / 2;
    float m = (SZ - h) / 2;

    sf::Vector2f p1(x, m);
    sf::Vector2f p2(x - lado / 2, m + h);
    sf::Vector2f p3(x + lado / 2, m + h);

    // preparació
    draw_triang(p1, p2, p3, sf::Color::White, win);

    // començam es fractal
    draw_sierspinki(it, p1, p2, p3, win);
}

int main(int argc, char* const argv[]) {
    sf::RenderWindow* win = new sf::RenderWindow(sf::VideoMode(SZ, SZ), "Sierspinski", sf::Style::Close | sf::Style::Titlebar);
    win->setPosition(sf::Vector2i(sf::VideoMode::getDesktopMode().width * 0.5 - win->getSize().x * 0.5, sf::VideoMode::getDesktopMode().height * 0.5 - win->getSize().y * 0.5));
    win->setFramerateLimit(10);

    // arguments
    int it = 5;
    if (argc > 1)
	std::sscanf(argv[1], "%d", &it);
  
    // dinàmica
    while (win->isOpen()) {
	sf::Event e;
	while (win->pollEvent(e)) {
	    if (e.type == sf::Event::Closed) win->close();
	}
	
	// dibuixam
	win->clear(sf::Color::Black);

	float mx = sf::Mouse::getPosition(*win).x;
	if (mx < 0 || mx > win->getSize().x) mx = 0;
	
	it = (int)map(mx, 0, win->getSize().x, 0, 10);
	
	dibuixar(it, 0.9 * SZ, win);

	win->display();
    }
    return 0;
}
